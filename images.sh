#!/bin/bash

# Image Management Script cho Landing Pages
# S·ª≠ d·ª•ng: bash images.sh <command> <subdomain> [source_dir]

APP_NAME="quanlyladipage"
PUBLISHED_DIR="/var/www/landingpages"

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }

show_help() {
    echo "üñºÔ∏è  LANDING PAGE IMAGE MANAGER"
    echo ""
    echo "C√°ch s·ª≠ d·ª•ng:"
    echo "  bash images.sh <command> <subdomain> [options]"
    echo ""
    echo "Commands:"
    echo "  upload <subdomain> <source_dir>  - Upload ·∫£nh t·ª´ th∆∞ m·ª•c local l√™n subdomain"
    echo "  download <subdomain> <dest_dir>  - Download ·∫£nh t·ª´ subdomain v·ªÅ local"
    echo "  list <subdomain>                 - Li·ªát k√™ t·∫•t c·∫£ ·∫£nh c·ªßa subdomain"
    echo "  optimize <subdomain>             - T·ªëi ∆∞u k√≠ch th∆∞·ªõc ·∫£nh c·ªßa subdomain"
    echo "  backup <subdomain>               - Backup ·∫£nh c·ªßa subdomain"
    echo "  clean <subdomain>                - X√≥a ·∫£nh kh√¥ng s·ª≠ d·ª•ng"
    echo "  info <subdomain>                 - Th√¥ng tin chi ti·∫øt v·ªÅ ·∫£nh"
    echo ""
    echo "V√≠ d·ª•:"
    echo "  bash images.sh upload my-product ./local-images/"
    echo "  bash images.sh list my-product"
    echo "  bash images.sh optimize my-product"
}

check_subdomain() {
    local subdomain=$1
    if [ -z "$subdomain" ]; then
        print_error "Vui l√≤ng cung c·∫•p t√™n subdomain"
        return 1
    fi
    
    if [ ! -d "$PUBLISHED_DIR/$subdomain" ]; then
        print_error "Subdomain '$subdomain' kh√¥ng t·ªìn t·∫°i"
        print_info "C√≥ s·∫µn: $(ls $PUBLISHED_DIR 2>/dev/null | tr '\n' ' ')"
        return 1
    fi
    return 0
}

upload_images() {
    local subdomain=$1
    local source_dir=$2
    
    if [ -z "$source_dir" ]; then
        print_error "Vui l√≤ng cung c·∫•p th∆∞ m·ª•c ngu·ªìn"
        return 1
    fi
    
    if [ ! -d "$source_dir" ]; then
        print_error "Th∆∞ m·ª•c ngu·ªìn '$source_dir' kh√¥ng t·ªìn t·∫°i"
        return 1
    fi
    
    check_subdomain $subdomain || return 1
    
    local dest_dir="$PUBLISHED_DIR/$subdomain/images"
    mkdir -p "$dest_dir"
    
    print_status "ƒêang upload ·∫£nh t·ª´ '$source_dir' l√™n '$subdomain'..."
    
    # Copy t·∫•t c·∫£ file ·∫£nh
    find "$source_dir" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.svg" -o -iname "*.webp" -o -iname "*.ico" \) -exec cp {} "$dest_dir/" \;
    
    # C·∫•p quy·ªÅn
    chown -R www-data:www-data "$dest_dir"
    chmod -R 755 "$dest_dir"
    
    local count=$(find "$dest_dir" -type f | wc -l)
    print_status "‚úÖ ƒê√£ upload $count ·∫£nh th√†nh c√¥ng!"
    
    # Hi·ªÉn th·ªã th√¥ng tin
    print_info "ƒê∆∞·ªùng d·∫´n server: $dest_dir"
    print_info "URL truy c·∫≠p: http://$subdomain.yourdomain.com/images/"
    
    list_images $subdomain
}

download_images() {
    local subdomain=$1
    local dest_dir=$2
    
    if [ -z "$dest_dir" ]; then
        dest_dir="./images-$subdomain"
    fi
    
    check_subdomain $subdomain || return 1
    
    local source_dir="$PUBLISHED_DIR/$subdomain/images"
    
    if [ ! -d "$source_dir" ]; then
        print_error "Th∆∞ m·ª•c ·∫£nh c·ªßa subdomain '$subdomain' kh√¥ng t·ªìn t·∫°i"
        return 1
    fi
    
    mkdir -p "$dest_dir"
    
    print_status "ƒêang download ·∫£nh t·ª´ '$subdomain' v·ªÅ '$dest_dir'..."
    
    cp -r "$source_dir"/* "$dest_dir/" 2>/dev/null || true
    
    local count=$(find "$dest_dir" -type f | wc -l)
    print_status "‚úÖ ƒê√£ download $count ·∫£nh th√†nh c√¥ng!"
}

list_images() {
    local subdomain=$1
    check_subdomain $subdomain || return 1
    
    local images_dir="$PUBLISHED_DIR/$subdomain/images"
    
    if [ ! -d "$images_dir" ]; then
        print_warning "Th∆∞ m·ª•c images ch∆∞a t·ªìn t·∫°i cho subdomain '$subdomain'"
        return 0
    fi
    
    print_info "üìÅ Danh s√°ch ·∫£nh c·ªßa subdomain '$subdomain':"
    echo ""
    
    local count=0
    while IFS= read -r -d '' file; do
        if [ -f "$file" ]; then
            local filename=$(basename "$file")
            local size=$(du -h "$file" | cut -f1)
            local modified=$(stat -c %y "$file" | cut -d' ' -f1)
            printf "  %-20s %8s  %12s\n" "$filename" "$size" "$modified"
            ((count++))
        fi
    done < <(find "$images_dir" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.svg" -o -iname "*.webp" -o -iname "*.ico" \) -print0)
    
    echo ""
    print_status "T·ªïng c·ªông: $count ·∫£nh"
    
    if [ $count -gt 0 ]; then
        local total_size=$(du -sh "$images_dir" 2>/dev/null | cut -f1)
        print_info "T·ªïng dung l∆∞·ª£ng: $total_size"
        print_info "URL truy c·∫≠p: http://$subdomain.yourdomain.com/images/"
    fi
}

optimize_images() {
    local subdomain=$1
    check_subdomain $subdomain || return 1
    
    local images_dir="$PUBLISHED_DIR/$subdomain/images"
    
    if [ ! -d "$images_dir" ]; then
        print_warning "Th∆∞ m·ª•c images ch∆∞a t·ªìn t·∫°i cho subdomain '$subdomain'"
        return 0
    fi
    
    print_status "ƒêang t·ªëi ∆∞u ·∫£nh cho subdomain '$subdomain'..."
    
    # C√†i ƒë·∫∑t tools n·∫øu ch∆∞a c√≥
    if ! command -v jpegoptim &> /dev/null; then
        print_status "C√†i ƒë·∫∑t jpegoptim..."
        apt update && apt install -y jpegoptim
    fi
    
    if ! command -v pngquant &> /dev/null; then
        print_status "C√†i ƒë·∫∑t pngquant..."
        apt update && apt install -y pngquant
    fi
    
    # Backup tr∆∞·ªõc khi optimize
    local backup_dir="/tmp/images-backup-$subdomain-$(date +%Y%m%d-%H%M%S)"
    cp -r "$images_dir" "$backup_dir"
    print_info "ƒê√£ backup v√†o: $backup_dir"
    
    local optimized=0
    
    # Optimize JPEG
    find "$images_dir" -name "*.jpg" -o -name "*.jpeg" | while read -r file; do
        if jpegoptim --max=85 --preserve --quiet "$file"; then
            ((optimized++))
        fi
    done
    
    # Optimize PNG  
    find "$images_dir" -name "*.png" | while read -r file; do
        if pngquant --quality=65-80 --force --ext .png "$file" 2>/dev/null; then
            ((optimized++))
        fi
    done
    
    print_status "‚úÖ ƒê√£ t·ªëi ∆∞u ·∫£nh xong!"
    print_info "Backup g·ªëc t·∫°i: $backup_dir"
    
    # So s√°nh k√≠ch th∆∞·ªõc
    local old_size=$(du -sh "$backup_dir" | cut -f1)
    local new_size=$(du -sh "$images_dir" | cut -f1)
    print_info "K√≠ch th∆∞·ªõc tr∆∞·ªõc: $old_size"
    print_info "K√≠ch th∆∞·ªõc sau: $new_size"
}

backup_images() {
    local subdomain=$1
    check_subdomain $subdomain || return 1
    
    local images_dir="$PUBLISHED_DIR/$subdomain/images"
    local backup_file="/var/backups/images-$subdomain-$(date +%Y%m%d-%H%M%S).tar.gz"
    
    if [ ! -d "$images_dir" ]; then
        print_warning "Th∆∞ m·ª•c images ch∆∞a t·ªìn t·∫°i cho subdomain '$subdomain'"
        return 0
    fi
    
    print_status "ƒêang backup ·∫£nh c·ªßa subdomain '$subdomain'..."
    
    tar -czf "$backup_file" -C "$images_dir" .
    
    print_status "‚úÖ Backup th√†nh c√¥ng!"
    print_info "File backup: $backup_file"
    print_info "K√≠ch th∆∞·ªõc: $(du -h "$backup_file" | cut -f1)"
}

get_image_info() {
    local subdomain=$1
    check_subdomain $subdomain || return 1
    
    local images_dir="$PUBLISHED_DIR/$subdomain/images"
    
    if [ ! -d "$images_dir" ]; then
        print_warning "Th∆∞ m·ª•c images ch∆∞a t·ªìn t·∫°i cho subdomain '$subdomain'"
        return 0
    fi
    
    print_info "üìä Th√¥ng tin chi ti·∫øt ·∫£nh c·ªßa subdomain '$subdomain':"
    echo ""
    
    # Th·ªëng k√™ theo lo·∫°i file
    echo "Lo·∫°i file:"
    find "$images_dir" -type f | grep -o '\.[^.]*$' | sort | uniq -c | sort -nr | while read -r count ext; do
        printf "  %-10s: %d files\n" "$ext" "$count"
    done
    echo ""
    
    # Top 5 file l·ªõn nh·∫•t
    echo "Top 5 file l·ªõn nh·∫•t:"
    find "$images_dir" -type f -exec du -h {} + | sort -hr | head -5 | while read -r size file; do
        local filename=$(basename "$file")
        printf "  %-6s %s\n" "$size" "$filename"
    done
    echo ""
    
    # Th·ªëng k√™ t·ªïng quan
    local total_files=$(find "$images_dir" -type f | wc -l)
    local total_size=$(du -sh "$images_dir" | cut -f1)
    local avg_size=$(( $(du -sb "$images_dir" | cut -f1) / $total_files / 1024 ))
    
    print_info "T·ªïng s·ªë file: $total_files"
    print_info "T·ªïng dung l∆∞·ª£ng: $total_size"
    print_info "K√≠ch th∆∞·ªõc trung b√¨nh: ${avg_size}KB/file"
}

# Main script
case "${1:-help}" in
    "upload")
        upload_images "$2" "$3"
        ;;
    "download")
        download_images "$2" "$3"
        ;;
    "list")
        list_images "$2"
        ;;
    "optimize")
        optimize_images "$2"
        ;;
    "backup")
        backup_images "$2"
        ;;
    "info")
        get_image_info "$2"
        ;;
    "help"|*)
        show_help
        ;;
esac